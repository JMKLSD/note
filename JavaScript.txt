1、var  x中的x 为变量，可以储存数字，文本值（但是需要用“”或者''包裹）（文本值被称为字符串）
2、== （等于）   ！= （不等于） &&（and）  ||（or）   ！（not）
 3.您可能会看到有些人在他们的代码中使用==和!=来判断相等和不相等，这些都是JavaScript中的有效运算符，但它们与===/!==不同，前者测试值是否相同， 但是数据类型可能不同，而后者的严格版本测试值和数据类型是否相同。 严格的版本往往导致更少的错误，所以我们建议您使用这些严格的版本。
3.      btn.onfocus及btn.onblur ― 颜色将于按钮被置于焦点或解除焦点时改变（尝试使用Tab移动至按钮上，然后再移开）。这些通常用于显示有关如何在置于焦点时填写表单字段的信息，或者如果表单字段刚刚填入不正确的值，则显示错误消息。
btn.ondblclick ― 颜色将仅于按钮被双击时改变。
window.onkeypress, window.onkeydown, window.onkeyup ― 当按钮被按下时颜色会发生改变. keypress 指的是通俗意义上的按下按钮 (按下并松开), 而 keydown 和 keyup 指的是按键动作的一部分,分别指按下和松开. 注意如果你将事件处理器添加到按钮本身，它将不会工作 ― 我们只能将它添加到代表整个浏览器窗口的 window对象中。
btn.onmouseover 和 btn.onmouseout ― 颜色将会在鼠标移入按钮上方时发生改变, 或者当它从按钮移出时.
4.八进制和十六进制：

如果前缀为0,则JavaScript会把数值常量解释为八进制数，如果前缀为 0和 “x“，则解释为十六进制数。
    var y = 0377;
    var x = 0xFF;
提示：绝不要在数字前面写零，除非需要进行八进制转换。

5.Date 对象用于处理日期和时间。可通过new 关键词来定义Date对象。

表示月份的参数介于 0 到11之间，也就是说，如果希望吧月设置为8月，则参数应该是7.

6浮点数： .数值，可以是一个整数，可以是带小数点的数值，并且允许数值是任意位数，这类数值称为浮点数。
7.布尔值（布尔类型）： 布尔数据只有两种可取值---true或false。
 true或false 在赋值时不能用引号括起来。
 
7.数组：   var  name = Array（“xxx”，“xxx”） 
                 var age = Array（）

8.if else 语句：  只有true和false，结果为true时，执行第一个，结果为false时，执行else。

9. 【==】是比较两个值是否相等。【=】是进行赋值
    【！=】  “ 不等于 ” 操作符         【&&】 逻辑 与 （只有两个都为true时才为true）
    【||】 逻辑 或 （其中一个为true时就能为true） 
    【！】 逻辑 飞 （把逻辑操作数返回的布尔值取反 例如： if（！（1>2）） 其结果为true。）

10。if语句的唯一不足是它无法用来完成重复性的操作。要想反复多次的执行同一个代码块，就必须使用循环语句。
只要给定条件仍能得到满足，循环语句里的代码就会重复的执行下去，一旦给定条件里的求值结果不再是true，循环也就到此为止。

11.while循环：
while循环与if语句非常相似，唯一的区别是：只要给定条件的求值结果是 true，包含在花括号里的代码就将反复的执行下去。

do...while循环：
因为while 中结果为false的话，会永远循环下去，不会执行括号里的代码。但是 do...while，会先执行一次。

for循环：
跟其他几个差不多，只是把循环结果进一步改写为紧凑的行使而已。
如：  for（var count = 1； count<11;count++）{
alert(coount);
}
 for循环最常见的用途之一是对某个数组里的全体元素进行遍历处理。
如： var beatles = Array("xxx" ,"xxx");
for(var count = 0; count< beatles.length; count++){
alert(beatles[count]);
}

12.声明函数，从第二个单词的首字母来大写；声明变量，用_符号来表示变量。 （这么做更容易区分哪个是函数，哪个是变量）
如：  convertToCelsius       temp_fahrenheit

13.return 返回一个数值、字符串、数组或布尔值。
如：  function multiply(num1,num2){
var total = num1 * num2;
return total;
}

14.  当你不想让  默认行为发生时，可以加入 
如： onclick=“ return false”

15.nodeValue ： 检索 和设置 节点的值

16.变量名：在为变量命名时一定要谨慎从事， “保留字” 的单词不能用做变量名；JS函数或方法的名字也不能用来做变量名

18.insertBefore() 方法：把一个新元素插入到一个现有元素的前面。
语法： parentElement.insertBefore(newElement,targetElement)
父元素.insertBefore（新元素，现有元素【意思是想把这个新元素插入到哪个现有元素的前面】）



19.window.onload : 在网页加载时使用函数。

20.需要对文档里的现有信息进行检索时：
①getElementById()  【找到 ID】
②getElementByTagName() 【找到元素】
③getAttribute()  【找到属性并返还这个属性里面的值】
     需要把信息添加到文档里面去：
①createElement()  【创建元素节点】
②createTextNode()   【创建文本】
③appendChild()  
④insertBefore() 
⑤setAttribute()  【为创建的元素增加属性和属性值】

21.因为我们现在无法使用CSS根据某个元素在节点树立的位置来为它声明一种样式，比如：把以下样式施加在所有h1元素的下一个兄弟节点上。

文档中下一个节点可以用 nextSibling 属性查找出来 比如： headers[i].nextSibling 




24.parseInt（）函数：可以把字符串里的数值信息提取出来。如果把一个以数字开头的字符串传递给这个函数，它将返回一个数值： parseInt（string） 这个函数返回值永远是整数。
    parseFloat（string） 函数会返回带小数点的数值（浮点数）



25.childNodes 属性让我们可以给定义文档的节点树里把任何一个元素的所有子元素检索出来。 childNodes属性将返回一个数组，这个数组包含给定元素节点的全体子元素。

26.nodeType属性来区分分档里的各个节点
元素节点的 属性值是1；
属性节点的 属性值是2；
文本节点的 属性值是3；
